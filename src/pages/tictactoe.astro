---
import Layout from "../layouts/Page.astro";
---

<Layout>
  <h1>MiniMax Algorithm</h1>
  <p>
    The Minimax algorithm is a decision-making strategy used in Tic-Tac-Toe AI
    to find the optimal move. It recursively explores all possible game states,
    assigning scores based on win/loss conditions. The AI maximizes its own
    score while assuming the opponent plays optimally to minimize it. By
    evaluating each moveâ€™s outcome, Minimax ensures the AI always selects the
    best possible move, making it nearly unbeatable.
  </p>

  <figure id="diagram1">
    <button type="button" class="btn btn-primary mb-4" @click="reset">
      Reset
    </button>
    <main class="d-flex justify-content-center">
      <svg :view-box.camel="`0 0 ${getWidth} ${getHeight}`">
        <g
          v-for="loc in locations"
          :key="`${loc.x}-${loc.y}`"
          @click="set(loc)"
        >
          <rect class="cell" :x="loc.x" :y="loc.y" width="1" height="1"></rect>

          <circle
            v-if="get(loc) === 2"
            :cx="loc.x + 0.5"
            :cy="loc.y + 0.5"
            r="0.4"
            fill="none"
            stroke="rgb(229, 74, 58)"
            stroke-width="0.1"></circle>

          <g
            v-if="get(loc) === 1"
            stroke="rgb(51, 151, 217)"
            stroke-width="0.1"
          >
            <line
              :x1="loc.x + 0.2"
              :y1="loc.y + 0.2"
              :x2="loc.x + 0.8"
              :y2="loc.y + 0.8"></line>
            <line
              :x1="loc.x + 0.2"
              :y1="loc.y + 0.8"
              :x2="loc.x + 0.8"
              :y2="loc.y + 0.2"></line>
          </g>
        </g>
      </svg>
    </main>
  </figure>

  <script type="module" src="/interactive-demos/tictactoe.js"></script>
</Layout>

<style>
  .cell {
    fill: hsl(60, 10%, 90%);
    stroke: hsl(60, 0%, 100%);
    stroke-width: 0.02px;
  }

  svg {
    max-width: 512px;
    max-height: 512px;
    width: 100%; /* Optional: Makes it responsive */
    height: auto;
  }
</style>
